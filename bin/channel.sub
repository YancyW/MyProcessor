#!/bin/bash


#(make sure the right shell will be used)
#$ -S /bin/bash
#
#execute the job from the current directory and not relative to your home directory
#$ -cwd

# sld5 for bird on NAF2, and sld6 on NAF1
#$ -l arch=amd64
#$ -l os=sld6

#$ -l h_rt=2:59:00
#$ -l h_vmem=8G

#set the email address
##$ -M yan.wang@desy.de
#
#send email when job aborts
#$ -m a

###==============================================================


echo "############################################################################"
echo "                             System information"
echo "                             =================="

echo "Host:"
hostname -f

echo "CPU(s):"
cat /proc/cpuinfo | grep "model name" | cut -b 14-

echo "RAM:"
cat /proc/meminfo | grep "MemTotal" | cut -b 10-

echo "Swap:"
cat /proc/meminfo | grep "SwapTotal" | cut -b 11-

echo "############################################################################"
echo "Group:      ${GROUP}"

echo "Hosttype:   ${HOSTTYPE}"

echo "JobID:      ${JOB_ID}"

echo "JobName:    ${JOB_NAME}"

echo "Job_Script: ${JOB_SCRIPT}"

echo "User:      ${LOGNAME}"

echo "Queue:      ${QUEUE}"

echo "Shell:      ${SHELL}"

echo "TMP:        ${TMP}"

echo "TMPDIR:     ${TMPDIR}"

echo "User:       ${USER}"

echo "Working_DIR:${PWD}"

echo "############################################################################"
echo
echo "############################################################################"
echo
source /cvmfs/ilc.desy.de/sw/x86_64_gcc48_sl6/v01-17-11/init_ilcsoft.sh

DIR=/afs/desy.de/user/y/ywang/Code/MyTest2/bin
cd ${DIR}

PROJECTNAME=MyProcessor
libname=${DIR}/../lib/lib$PROJECTNAME
export MARLIN_DLL=${MARLIN_DLL}:${libname}.so
echo "install the lib to MARLIN_DLL:" ${MARLIN_DLL}



if [[ $1 == "nh"  && $# == 4 ]] ; then
	echo "begin to cal events!" 
	input_class_name=${1,,}
	info=${2,,}
	mode=${3,,}
	mass=${4,,}
elif [[ $1 == "higgs"  && $# == 4 ]] ; then
	echo "begin to cal events!" 
	input_class_name=${1,,}
	info=${2,,}
	mode=${3,,}
	mass=${4,,}
elif [[ $1 == "2f"  && $# == 4 ]] ; then
	echo "begin to cal events!" 
	input_class_name=${1,,}
	info=${2,,}
	mode=${3,,}
	mass=${4,,}
elif [[ $1 == "4f"  && $# == 4 ]] ; then
	echo "begin to cal events!" 
	input_class_name=${1,,}
	info=${2,,}
	mode=${3,,}
	mass=${4,,}
elif [[ $# == 4 ]] ; then
	echo "begin to cal events!" 
	input_class_name=${1,,}
	info=${2,,}
	mode=${3,,}
	mass=${4,,}
elif [[ $# == 5 ]] ; then
	echo "begin to cal events!" 
	input_class_name=${1,,}
	input_final_state=${2,,}
	info=${3,,}
	mode=${4,,}
	mass=${5,,}
else
	echo "usage: ./run_channel class_name final_state info mode mass" 
	exit
fi






if [[ ${input_class_name} = "higgs" ]] ; then
	class_name_array="higgs"
	input_final_state=("e2")
elif [[ ${input_class_name} = "nh" ]] ; then
	class_name_array="nh"
	input_final_state=(${mass})
elif [[ ${input_class_name} = "2f" ]] ; then
	class_name_array="2f_z"
	input_final_state=("l" "bha")
elif [[ ${input_class_name} = "4f" ]] ; then
	class_name_array=("4f_ww" "4f_zz" "4f_zzww" "4f_szee" "4f_sznn" "4f_szsw" "4f_sw")
	input_final_state=("l" "sl")
else
	class_name_array=${input_class_name}
	input_final_state=("l" "sl")
fi	

pol_profile=("lr" "rl" "ll" "rr")
pol_length=${#pol_profile[@]}

final_state_length=${#input_final_state[@]}
class_name_length=${#class_name_array[@]}

echo ""
echo "has setting all variables!"
echo ""

xml_direction=${DIR}/../xml
if [[ $info == "code" ]] ; then
	echo "begin to generate samples!"
	echo ""
	for (( k=0; k<$(( $class_name_length)); k++ ))
	do
		class_name=${class_name_array[k]}
		for (( i=0; i<$(( $final_state_length )); i++ ))
		do
			final_state=${input_final_state[i]}
			for (( j=0; j<$(( $pol_length )); j++ ))
			do
				pol=${pol_profile[j]}
				NewXml=${class_name}_${final_state}_${pol}_${mass}.xml
				${DIR}/set_xml.sh ${class_name} ${final_state} ${pol} ${mass}
				if [[ -a ${xml_direction}/${NewXml} ]] ; then
					echo "generate samples for: "${NewXml} 
					echo ""
					${DIR}/run.sh ${NewXml} 
				fi
			done
		done
	done
fi




echo "begin to analysis for each pure polarization"
echo ""


for (( k=0; k<$(( $class_name_length)); k++ ))
do
	class_name=${class_name_array[k]}
	if [[ $mode == "rc" ]] ; then
		ana_content=` eval ${DIR}/analysis_rc.sh ${class_name} ${input_final_state} `
		judge=` echo ${ana_content} | grep "no such file" `
		if [[ "x" != "x${judge}" ]] ;then
			echo ${ana_content}
			exit
		fi
		echo "begin to cal for real beam polarization"
		echo ""
		${DIR}/cal_rc.sh ${class_name} ${input_final_state[@]} 
	elif [[ $mode == "recovery" ]] ; then
		ana_content=` eval ${DIR}/analysis_recovery.sh ${class_name} ${input_final_state} `
		judge=` echo ${ana_content} | grep "no such file" `
		if [[ "x" != "x${judge}" ]] ;then
			echo ${ana_content}
			exit
		fi
		echo "begin to cal for real beam polarization"
		echo ""
		${DIR}/cal_recovery.sh ${class_name} ${input_final_state[@]} 
	else
		for (( i=0; i<$final_state_length; i++ ))
		do
			final_state=${input_final_state[i]}
			echo "dealing with: " ${class_name} ${final_state} ${mass} 

			ana_content=` eval ${DIR}/analysis_record.sh ${class_name} ${final_state} ${mass} `
			judge=` echo ${ana_content} | grep "no such file" `
			if [[ "x" != "x${judge}" ]] ;then
				echo ${ana_content}
				exit
			fi
		done

	fi
done
